// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Models;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ZoneVitaeSqlContext))]
    partial class ZoneVitaeSqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ComunidadTag", b =>
                {
                    b.Property<long>("ComunidadId")
                        .HasColumnType("bigint")
                        .HasColumnName("comunidad_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tag_id");

                    b.HasKey("ComunidadId", "TagId")
                        .HasName("PK__comunida__A2962651151FB263");

                    b.HasIndex(new[] { "TagId" }, "IX_comunidad_tags_tag_id");

                    b.ToTable("comunidad_tags", (string)null);
                });

            modelBuilder.Entity("Follow", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("usuario_id");

                    b.Property<long>("ComunidadId")
                        .HasColumnType("bigint")
                        .HasColumnName("comunidad_id");

                    b.HasKey("UsuarioId", "ComunidadId")
                        .HasName("PK__follows__93BC2668D4053F6C");

                    b.HasIndex(new[] { "ComunidadId" }, "IX_follows_comunidad_id");

                    b.ToTable("follows", (string)null);
                });

            modelBuilder.Entity("MeEncantum", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("usuario_id");

                    b.Property<long>("ReportsId")
                        .HasColumnType("bigint")
                        .HasColumnName("reports_id");

                    b.HasKey("UsuarioId", "ReportsId")
                        .HasName("PK__me_encan__55C3BD85055B436C");

                    b.HasIndex(new[] { "ReportsId" }, "IX_me_encanta_reports_id");

                    b.ToTable("me_encanta", (string)null);
                });

            modelBuilder.Entity("ReportsTag", b =>
                {
                    b.Property<long>("ReportsId")
                        .HasColumnType("bigint")
                        .HasColumnName("reports_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tag_id");

                    b.HasKey("ReportsId", "TagId")
                        .HasName("PK__reports___C56F988DAEA91C7D");

                    b.HasIndex(new[] { "TagId" }, "IX_reports_tags_tag_id");

                    b.ToTable("reports_tags", (string)null);
                });

            modelBuilder.Entity("api.Models.Actividade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ComunidadId")
                        .HasColumnType("bigint")
                        .HasColumnName("comunidad_id");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cover");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("FechaFin")
                        .HasColumnType("date")
                        .HasColumnName("fecha_fin");

                    b.Property<DateOnly>("FechaInicio")
                        .HasColumnType("date")
                        .HasColumnName("fecha_inicio");

                    b.Property<string>("Frecuencia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("frecuencia");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("nombre");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ubicacion");

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Virtual")
                        .HasColumnType("bit")
                        .HasColumnName("virtual");

                    b.HasKey("Id")
                        .HasName("PK__activida__3214EC27B858A9C9");

                    b.HasIndex(new[] { "ComunidadId" }, "IX_actividades_comunidad_id");

                    b.HasIndex(new[] { "FechaInicio", "FechaFin" }, "IX_actividades_fechas");

                    b.ToTable("actividades", (string)null);
                });

            modelBuilder.Entity("api.Models.Comentario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActividadesId")
                        .HasColumnType("bigint")
                        .HasColumnName("actividades_Id");

                    b.Property<Guid?>("AutorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("autor_id");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contenido");

                    b.Property<DateTime>("FechaComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_comentario")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__comentar__3214EC2706CC10D4");

                    b.HasIndex(new[] { "ActividadesId" }, "IX_comentarios_actividades_Id");

                    b.HasIndex(new[] { "AutorId" }, "IX_comentarios_autor_id");

                    b.ToTable("comentarios", (string)null);
                });

            modelBuilder.Entity("api.Models.Comunidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Cover")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cover");

                    b.Property<Guid?>("CreadorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("creador_id");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pendiente de Revision")
                        .HasColumnName("estado");

                    b.Property<string>("Logo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("logo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("nombre");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ubicacion");

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__comunida__3214EC275E116622");

                    b.HasIndex(new[] { "CreadorId" }, "IX_comunidades_creador_id");

                    b.HasIndex(new[] { "Estado" }, "IX_comunidades_estado");

                    b.ToTable("comunidades", null, t =>
                        {
                            t.HasTrigger("tr_asignar_admin_creador");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("api.Models.Foto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<long?>("ReportsId")
                        .HasColumnType("bigint")
                        .HasColumnName("reports_id");

                    b.HasKey("Id")
                        .HasName("PK__fotos__3214EC27A2E45509");

                    b.HasIndex(new[] { "ReportsId" }, "IX_fotos_reports_id");

                    b.ToTable("fotos", (string)null);
                });

            modelBuilder.Entity("api.Models.GaleriaComunidad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ComunidadId")
                        .HasColumnType("bigint")
                        .HasColumnName("comunidad_id");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("imagen");

                    b.HasKey("Id")
                        .HasName("PK__galeria___3214EC27A81157AB");

                    b.HasIndex(new[] { "ComunidadId" }, "IX_galeria_comunidad_comunidad_id");

                    b.ToTable("galeria_comunidad", (string)null);
                });

            modelBuilder.Entity("api.Models.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Anonimo")
                        .HasColumnType("bit")
                        .HasColumnName("anonimo");

                    b.Property<Guid?>("AutorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("autor_id");

                    b.Property<long?>("ComunidadId")
                        .HasColumnType("bigint")
                        .HasColumnName("comunidad_id");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contenido");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pendiente_Moderacion")
                        .HasColumnName("estado");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("titulo");

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__reports__3214EC273EE1463B");

                    b.HasIndex(new[] { "AutorId" }, "IX_reports_autor_id");

                    b.HasIndex(new[] { "ComunidadId" }, "IX_reports_comunidad_id");

                    b.HasIndex(new[] { "Estado", "ComunidadId" }, "IX_reports_estado_comunidad");

                    b.HasIndex(new[] { "Estado", "CreateAt" }, "IX_reports_estado_fecha");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PK__roles__3214EC2707BC9C90");

                    b.HasIndex(new[] { "Nombre" }, "IX_roles_nombre")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("api.Models.RolesComunidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PK__roles_co__3214EC276083F2C5");

                    b.HasIndex(new[] { "Nombre" }, "IX_roles_comunidades_nombre")
                        .IsUnique();

                    b.ToTable("roles_comunidades", (string)null);
                });

            modelBuilder.Entity("api.Models.SeguimientoReporte", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccionRealizada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("accion_realizada");

                    b.Property<string>("AccionRecomendada")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("accion_recomendada");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comentario");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("DocumentosAdjuntos")
                        .HasColumnType("bit")
                        .HasColumnName("documentos_adjuntos");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("estado");

                    b.Property<string>("EstadoAnterior")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("estado_anterior");

                    b.Property<string>("Imagen")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("imagen");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Media")
                        .HasColumnName("prioridad");

                    b.Property<long>("ReporteId")
                        .HasColumnType("bigint")
                        .HasColumnName("reporte_id");

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("PK__seguimie__3214EC274713A4BA");

                    b.HasIndex(new[] { "Estado", "CreateAt" }, "IX_seguimiento_reportes_estado");

                    b.HasIndex(new[] { "ReporteId" }, "IX_seguimiento_reportes_reporte_id");

                    b.HasIndex(new[] { "UsuarioId" }, "IX_seguimiento_reportes_usuario_id");

                    b.ToTable("seguimiento_reportes", (string)null);
                });

            modelBuilder.Entity("api.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("PK__tags__3214EC27E9822C9E");

                    b.HasIndex(new[] { "Nombre" }, "IX_tags_nombre")
                        .IsUnique();

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("api.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("EstadoCuenta")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Activo")
                        .HasColumnName("estado_cuenta");

                    b.Property<DateOnly?>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("FotoPerfil")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("foto_perfil");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("genero");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nombre_usuario");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__usuarios__3214EC2747520E7B");

                    b.HasIndex(new[] { "Email" }, "IX_usuarios_email")
                        .IsUnique();

                    b.HasIndex(new[] { "EstadoCuenta" }, "IX_usuarios_estado_cuenta");

                    b.HasIndex(new[] { "NombreUsuario" }, "IX_usuarios_nombre_usuario")
                        .IsUnique();

                    b.ToTable("usuarios", null, t =>
                        {
                            t.HasTrigger("tr_asignar_rol_usuario_regular");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("api.Models.UsuariosComunidadesRole", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("usuario_id");

                    b.Property<long>("ComunidadId")
                        .HasColumnType("bigint")
                        .HasColumnName("comunidad_id");

                    b.Property<DateTime>("FechaAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_asignacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("RolId")
                        .HasColumnType("bigint")
                        .HasColumnName("rol_id");

                    b.HasKey("UsuarioId", "ComunidadId")
                        .HasName("PK__usuarios__93BC2668204D9603");

                    b.HasIndex("ComunidadId");

                    b.HasIndex("RolId");

                    b.ToTable("usuarios_comunidades_roles", (string)null);
                });

            modelBuilder.Entity("api.Models.UsuariosRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<Guid?>("AsignadoPor")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("asignado_por");

                    b.Property<DateTime>("FechaAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_asignacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaExpiracion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_expiracion");

                    b.Property<Guid>("IdRol")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_rol");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id")
                        .HasName("PK__usuarios__3213E83F4BA7710F");

                    b.HasIndex(new[] { "IdRol" }, "IX_usuarios_roles_rol");

                    b.HasIndex(new[] { "IdUsuario", "IdRol" }, "IX_usuarios_roles_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "IdUsuario" }, "IX_usuarios_roles_usuario");

                    b.ToTable("usuarios_roles", (string)null);
                });

            modelBuilder.Entity("ComunidadTag", b =>
                {
                    b.HasOne("api.Models.Comunidade", null)
                        .WithMany()
                        .HasForeignKey("ComunidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_comunidad_tags_comunidad");

                    b.HasOne("api.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_comunidad_tags_tag");
                });

            modelBuilder.Entity("Follow", b =>
                {
                    b.HasOne("api.Models.Comunidade", null)
                        .WithMany()
                        .HasForeignKey("ComunidadId")
                        .IsRequired()
                        .HasConstraintName("FK_follows_comunidad");

                    b.HasOne("api.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_follows_usuario");
                });

            modelBuilder.Entity("MeEncantum", b =>
                {
                    b.HasOne("api.Models.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .IsRequired()
                        .HasConstraintName("FK_me_encanta_report");

                    b.HasOne("api.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_me_encanta_usuario");
                });

            modelBuilder.Entity("ReportsTag", b =>
                {
                    b.HasOne("api.Models.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_reports_tags_report");

                    b.HasOne("api.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_reports_tags_tag");
                });

            modelBuilder.Entity("api.Models.Actividade", b =>
                {
                    b.HasOne("api.Models.Comunidade", "Comunidad")
                        .WithMany("Actividades")
                        .HasForeignKey("ComunidadId")
                        .HasConstraintName("FK_actividades_comunidad");

                    b.Navigation("Comunidad");
                });

            modelBuilder.Entity("api.Models.Comentario", b =>
                {
                    b.HasOne("api.Models.Actividade", "Actividades")
                        .WithMany("Comentarios")
                        .HasForeignKey("ActividadesId")
                        .HasConstraintName("FK_comentarios_actividad");

                    b.HasOne("api.Models.Usuario", "Autor")
                        .WithMany("Comentarios")
                        .HasForeignKey("AutorId")
                        .HasConstraintName("FK_comentarios_autor");

                    b.Navigation("Actividades");

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("api.Models.Comunidade", b =>
                {
                    b.HasOne("api.Models.Usuario", "Creador")
                        .WithMany("Comunidades")
                        .HasForeignKey("CreadorId")
                        .HasConstraintName("FK_comunidades_creador");

                    b.Navigation("Creador");
                });

            modelBuilder.Entity("api.Models.Foto", b =>
                {
                    b.HasOne("api.Models.Report", "Reports")
                        .WithMany("Fotos")
                        .HasForeignKey("ReportsId")
                        .HasConstraintName("FK_fotos_reports");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("api.Models.GaleriaComunidad", b =>
                {
                    b.HasOne("api.Models.Comunidade", "Comunidad")
                        .WithMany("GaleriaComunidads")
                        .HasForeignKey("ComunidadId")
                        .HasConstraintName("FK_galeria_comunidad_comunidad");

                    b.Navigation("Comunidad");
                });

            modelBuilder.Entity("api.Models.Report", b =>
                {
                    b.HasOne("api.Models.Usuario", "Autor")
                        .WithMany("ReportsNavigation")
                        .HasForeignKey("AutorId")
                        .HasConstraintName("FK_reports_autor");

                    b.HasOne("api.Models.Comunidade", "Comunidad")
                        .WithMany("Reports")
                        .HasForeignKey("ComunidadId")
                        .HasConstraintName("FK_reports_comunidad");

                    b.Navigation("Autor");

                    b.Navigation("Comunidad");
                });

            modelBuilder.Entity("api.Models.SeguimientoReporte", b =>
                {
                    b.HasOne("api.Models.Report", "Reporte")
                        .WithMany("SeguimientoReportes")
                        .HasForeignKey("ReporteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_seguimiento_reportes_reporte");

                    b.HasOne("api.Models.Usuario", "Usuario")
                        .WithMany("SeguimientoReportes")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_seguimiento_reportes_usuario");

                    b.Navigation("Reporte");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("api.Models.UsuariosComunidadesRole", b =>
                {
                    b.HasOne("api.Models.Comunidade", "Comunidad")
                        .WithMany("UsuariosComunidadesRoles")
                        .HasForeignKey("ComunidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_usuarios_comunidades_roles_comunidad");

                    b.HasOne("api.Models.RolesComunidade", "Rol")
                        .WithMany("UsuariosComunidadesRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_usuarios_comunidades_roles_rol");

                    b.HasOne("api.Models.Usuario", "Usuario")
                        .WithMany("UsuariosComunidadesRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_usuarios_comunidades_roles_usuario");

                    b.Navigation("Comunidad");

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("api.Models.UsuariosRole", b =>
                {
                    b.HasOne("api.Models.Role", "IdRolNavigation")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_usuarios_roles_rol");

                    b.HasOne("api.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_usuarios_roles_usuario");

                    b.Navigation("IdRolNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("api.Models.Actividade", b =>
                {
                    b.Navigation("Comentarios");
                });

            modelBuilder.Entity("api.Models.Comunidade", b =>
                {
                    b.Navigation("Actividades");

                    b.Navigation("GaleriaComunidads");

                    b.Navigation("Reports");

                    b.Navigation("UsuariosComunidadesRoles");
                });

            modelBuilder.Entity("api.Models.Report", b =>
                {
                    b.Navigation("Fotos");

                    b.Navigation("SeguimientoReportes");
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.Navigation("UsuariosRoles");
                });

            modelBuilder.Entity("api.Models.RolesComunidade", b =>
                {
                    b.Navigation("UsuariosComunidadesRoles");
                });

            modelBuilder.Entity("api.Models.Usuario", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Comunidades");

                    b.Navigation("ReportsNavigation");

                    b.Navigation("SeguimientoReportes");

                    b.Navigation("UsuariosComunidadesRoles");

                    b.Navigation("UsuariosRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
